/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// BasicStreamBase : Object containing basic details about the stream. 



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BasicStreamBase {
    /// The unique ID of the stream. 
    #[serde(rename = "stream_id", skip_serializing_if = "Option::is_none")]
    pub stream_id: Option<i32>,
    /// The name of the stream. 
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description. 
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<i32>,
    /// Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 
    #[serde(rename = "invite_only", skip_serializing_if = "Option::is_none")]
    pub invite_only: Option<bool>,
    /// The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 
    #[serde(rename = "rendered_description", skip_serializing_if = "Option::is_none")]
    pub rendered_description: Option<String>,
    /// Whether the stream has been configured to allow unauthenticated access to its message history from the web. 
    #[serde(rename = "is_web_public", skip_serializing_if = "Option::is_none")]
    pub is_web_public: Option<bool>,
    /// Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only new members can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
    #[serde(rename = "stream_post_policy", skip_serializing_if = "Option::is_none")]
    pub stream_post_policy: Option<i32>,
    /// Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
    #[serde(rename = "message_retention_days", skip_serializing_if = "Option::is_none")]
    pub message_retention_days: Option<i32>,
    /// Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future. 
    #[serde(rename = "history_public_to_subscribers", skip_serializing_if = "Option::is_none")]
    pub history_public_to_subscribers: Option<bool>,
    /// The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 
    #[serde(rename = "first_message_id", skip_serializing_if = "Option::is_none")]
    pub first_message_id: Option<i32>,
    /// Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead. 
    #[serde(rename = "is_announcement_only", skip_serializing_if = "Option::is_none")]
    pub is_announcement_only: Option<bool>,
}

impl BasicStreamBase {
    /// Object containing basic details about the stream. 
    pub fn new() -> BasicStreamBase {
        BasicStreamBase {
            stream_id: None,
            name: None,
            description: None,
            date_created: None,
            invite_only: None,
            rendered_description: None,
            is_web_public: None,
            stream_post_policy: None,
            message_retention_days: None,
            history_public_to_subscribers: None,
            first_message_id: None,
            is_announcement_only: None,
        }
    }
}


