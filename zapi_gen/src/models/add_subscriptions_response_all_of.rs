/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddSubscriptionsResponseAllOf {
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<serde_json::Value>,
    #[serde(rename = "msg", skip_serializing_if = "Option::is_none")]
    pub msg: Option<serde_json::Value>,
    /// A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. 
    #[serde(rename = "subscribed", skip_serializing_if = "Option::is_none")]
    pub subscribed: Option<::std::collections::HashMap<String, Vec<String>>>,
    /// A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. 
    #[serde(rename = "already_subscribed", skip_serializing_if = "Option::is_none")]
    pub already_subscribed: Option<::std::collections::HashMap<String, Vec<String>>>,
    /// A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`. 
    #[serde(rename = "unauthorized", skip_serializing_if = "Option::is_none")]
    pub unauthorized: Option<Vec<String>>,
}

impl AddSubscriptionsResponseAllOf {
    pub fn new() -> AddSubscriptionsResponseAllOf {
        AddSubscriptionsResponseAllOf {
            result: None,
            msg: None,
            subscribed: None,
            already_subscribed: None,
            unauthorized: None,
        }
    }
}


