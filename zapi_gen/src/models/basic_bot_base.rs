/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BasicBotBase {
    /// The user id of the bot. 
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// The full name of the bot. 
    #[serde(rename = "full_name", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    /// The API key of the bot which it uses to make API requests. 
    #[serde(rename = "api_key", skip_serializing_if = "Option::is_none")]
    pub api_key: Option<String>,
    /// The default sending stream of the bot. Null if the bot doesn't have a default sending stream. 
    #[serde(rename = "default_sending_stream", skip_serializing_if = "Option::is_none")]
    pub default_sending_stream: Option<String>,
    /// The default stream for which the bot receives events/register data. Null if the bot doesn't have such a default stream. 
    #[serde(rename = "default_events_register_stream", skip_serializing_if = "Option::is_none")]
    pub default_events_register_stream: Option<String>,
    /// Whether the bot can send messages to all streams by default. 
    #[serde(rename = "default_all_public_streams", skip_serializing_if = "Option::is_none")]
    pub default_all_public_streams: Option<bool>,
    /// The URL of the bot's avatar. 
    #[serde(rename = "avatar_url", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    /// The user id of the bot's owner.  Null if the bot has no owner. 
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<i32>,
    /// The \"Services\" array contains extra configuration fields only relevant for Outgoing webhook bots and Embedded bots.  It is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change. 
    #[serde(rename = "services", skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<crate::models::OneOfobjectobject>>,
}

impl BasicBotBase {
    pub fn new() -> BasicBotBase {
        BasicBotBase {
            user_id: None,
            full_name: None,
            api_key: None,
            default_sending_stream: None,
            default_events_register_stream: None,
            default_all_public_streams: None,
            avatar_url: None,
            owner_id: None,
            services: None,
        }
    }
}


