/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmojiReactionBase {
    /// A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint. 
    #[serde(rename = "emoji_code", skip_serializing_if = "Option::is_none")]
    pub emoji_code: Option<String>,
    /// Name of the emoji. 
    #[serde(rename = "emoji_name", skip_serializing_if = "Option::is_none")]
    pub emoji_name: Option<String>,
    /// One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji. 
    #[serde(rename = "reaction_type", skip_serializing_if = "Option::is_none")]
    pub reaction_type: Option<String>,
    /// The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future. 
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::EmojiReactionBaseUser>>,
}

impl EmojiReactionBase {
    pub fn new() -> EmojiReactionBase {
        EmojiReactionBase {
            emoji_code: None,
            emoji_name: None,
            reaction_type: None,
            user_id: None,
            user: None,
        }
    }
}


